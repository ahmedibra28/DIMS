generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  email               String   @unique
  name                String
  image               String?
  bio                 String?
  mobile              Int?
  address             String?
  password            String
  confirmed           Boolean  @default(false)
  blocked             Boolean  @default(false)
  resetPasswordToken  String?
  resetPasswordExpire BigInt?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)
  roleId String

  noticesAsUser      Notice[]        @relation("UserToNotice")
  noticesAsCreatedBy Notice[]        @relation("CreatedByToNotice")
  schools            School[]
  courses            Course[]
  subjects           Subject[]
  students           Student[]
  instructors        Instructor[]
  assignCourses      AssignCourse[]
  assignSubjects     AssignSubject[]

  @@map("users")
}

model Role {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  type        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users             User[]
  permissions       Permission[]
  clientPermissions ClientPermission[]
  notices           Notice[]

  @@map("roles")
}

model Permission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String
  method      Method
  route       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@unique([method, route])
  @@map("permissions")
}

model ClientPermission {
  id          String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name        String   @unique
  sort        Int
  menu        String
  path        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  role Role[]

  @@map("client_permissions")
}

model School {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name      String
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course      Course[]
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById String

  @@map("schools")
}

model Course {
  id           String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name         String
  price        Float    @default(0)
  duration     Int
  examinations String[]
  certificate  String?
  enrolment    String?
  status       Status   @default(ACTIVE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  school        School         @relation(fields: [schoolId], references: [id], onDelete: Restrict)
  schoolId      String
  subject       Subject[]
  createdBy     User           @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById   String
  assignCourses AssignCourse[]

  @@map("courses")
}

model Subject {
  id             String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  name           String
  semester       Int
  theoryMarks    Int
  practicalMarks Int
  status         Status   @default(ACTIVE)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  course         Course          @relation(fields: [courseId], references: [id], onDelete: Restrict)
  courseId       String
  createdBy      User            @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById    String
  assignSubjects AssignSubject[]

  @@unique([semester, name, courseId])
  @@map("subjects")
}

model Student {
  id                String        @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  rollNo            String
  name              String
  placeOfBirth      String
  dateOfBirth       String
  nationality       String
  sex               Sex
  education         String
  district          String
  mobile            Int
  contactName       String
  contactMobile     Int
  contactEmail      String
  contactRelation   String
  somaliLanguage    LanguageLevel
  arabicLanguage    LanguageLevel
  englishLanguage   LanguageLevel
  kiswahiliLanguage LanguageLevel
  image             String?
  note              String?
  balance           Float         @default(0)
  status            Status        @default(ACTIVE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  createdBy     User           @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById   String
  assignCourses AssignCourse[]

  @@map("students")
}

model Instructor {
  id              String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  rollNo          String
  name            String
  placeOfBirth    String
  dateOfBirth     String
  nationality     String
  sex             Sex
  email           String
  qualification   String
  experience      String
  district        String
  mobile          Int
  contactName     String
  contactMobile   Int
  contactEmail    String
  contactRelation String
  image           String?
  note            String?
  status          Status   @default(ACTIVE)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  createdBy      User            @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById    String
  assignSubjects AssignSubject[]

  @@map("instructors")
}

model Notice {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  title     String
  note      String
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  user   User?   @relation("UserToNotice", fields: [userId], references: [id], onDelete: Restrict)
  userId String?

  createdBy   User   @relation("CreatedByToNotice", fields: [createdById], references: [id], onDelete: Restrict)
  createdById String

  @@map("notices")
}

model AssignCourse {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  semester  Int
  shift     Shift
  discount  Float    @default(0)
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student     Student @relation(fields: [studentId], references: [id], onDelete: Restrict)
  studentId   String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Restrict)
  courseId    String
  createdBy   User    @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById String

  @@map("assign_courses")
}

model AssignSubject {
  id        String   @id @default(dbgenerated("nanoid()")) @db.VarChar(21)
  semester  Int
  shift     Shift
  status    Status   @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  instructor   Instructor @relation(fields: [instructorId], references: [id], onDelete: Restrict)
  instructorId String
  subject      Subject    @relation(fields: [subjectId], references: [id], onDelete: Restrict)
  subjectId    String
  createdBy    User       @relation(fields: [createdById], references: [id], onDelete: Restrict)
  createdById  String

  @@map("assign_subjects")
}

enum Method {
  GET
  POST
  PUT
  DELETE
}

enum Status {
  ACTIVE
  INACTIVE
  DELETED
}

enum Sex {
  MALE
  FEMALE
}

enum LanguageLevel {
  FLUENT
  GOOD
  FAIR
}

enum Shift {
  MORNING
  AFTERNOON
}
